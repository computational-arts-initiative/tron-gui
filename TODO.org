* Public API

** DONE BREAKING Instead of `ValueAt`, just pass the `Tron ()` everywhere (while keeping the `ValueAt`-helpers), then it looks much more clear what actually happens;
** TODO BREAKING Close `ProxyValue` constructors from public;
** DONE BREAKING Stick to just one `WithTron.Backed`, since anyway it is possible to convert one to another using `Tron` methods;
** TODO NEXTVER Get rid of `maxRows` and `maxCols` in `PanelShape` and switch to manual pagination, do it only when user wants: ability to disable / enable pagination from builder + Move paging inside nested controls;
** DONE Detachable: Add `clientId` to the URL when it was generated (so that reloading the page won't lose changes);
** TODO BREAKING do not store `ClientID` in the `RawOutUpdate`, but be able to add it with `Expose.Convert` helpers and so use it only in `Detachable`, where it is needed; (Partly done);
** TODO BREAKING API shouldn't allow `nest` and `choice` with no items;
** DONE BREAKING? send some special value with `RawOutUpdate` for `Choice` controls or else it is hard to get what was actually chosen;
** TODO BREAKING? for choice, give user option either to show icon on the button, or the label, even if the items in the choice have icons;
** DONE BUG selecting item on the second page of the choice control could make other panels content disappear; (Tiler: selecting _Tile/Tileset_ breaks _Color Scheme/BG Color_)
    *** It seems `[0, 2]` and `[2, 0]` are conflicting in this case;
** DONE NEXTVER `Builder.noPaging`
** DONE NEXTVER The companion helper for building interface from JS;
** TODO NEXTVER BREAKING? `buttons` and stuff should all be able to be appended using a single function, at least in default case;
** TODO NEXTVER BREAKING? `choices` and stuff should all be able to be appended using a single function, at least in default case;
** TODO NEXTVER BUG Nesting is not visible when it has no shape;
** TODO NEXTVER BREAKING `choiceBy` should accept the `Set a` as the last arguments, for the sake of chaining;
** TODO BUG NEXTVER JS `choice` as switch is not sending updates from buttons to JS;

* UX / Design

** TODO NEXTVER Use pixel ratio;
** TODO NEXTVER When nestings don't fit the screen, show something;
** TODO NEXTVER BUG Three controls are not positioned in the center;
** TODO Find a way to disable browser scrolling on space;
** TODO Test keyboard navigation, adapt it to the Dock;
** TODO NEXTVER _Active_ condition for a button, some effect for when it is pressed;
** TODO Vertical pagination;
** TODO NEXTVER Consider selecting the page with current item when update came from JS;
** TODO Support touch events;
** TODO Nostalgic theme;
** TODO Some command palette/Spotlight thing to enter values using assignments;
** TODO Allow to enter formulae in the inputs;
** TODO Detachable: User can't get the part of the UI back (use locked-mode for that?);
    *** Hide the user view by default, when interface is detached;
    *** Or give user the choice if to view the original model or not;

* Current controls

** TODO NEXTVER BUG Text editing is not finishing sometimes (see `BuildFromJs`); one needs to push the text control for it to save;
** DONE NEXTVER BUG The values of `Live` controls are fired but not seen while dragging;
** TODO Input box for the knobs;
** TODO Show the value on XY controllers as well;
** TODO What the axes center actually is? move (0,0) to the place where it is?;

* New controls

** TODO Add slider mode to the knobs;
** TODO Multiple-choice control;
** TODO Locked controls;

* Inner API / Logic

** TODO Tests;
    - [ ] Detachable;
    - [ ] Sending updates from/to JS;
    - [ ] ...
** DONE NEXTVER Separate controls rendering in sub-modules;
** TODO NEXTVER Transfer `transient` states to the controls as well;
** TODO Move encoding/decoding controls inside their own modules;
** TODO Don't init as _(0, 0)_, rather something?
** TODO BREAKING `Tron.Tree.Expose` -> `Tron.Expose`?
** TODO Consider this module to use for `Tree`: https://package.elm-lang.org/packages/tomjkidd/elm-multiway-tree-zipper/latest/MultiwayTreeZipper
** DONE BUG Use labeled paths to communicate with JS, index-based IDs can change if some controls were added/removed, label paths have higher chance to be unique; The safest way is UIDs though;
** DONE Store a value even in `Nil` `Property`, so that property would always have some value, no `Maybe`s, it is easier to `map` the `Property` and always have some value inside; Rename `Nil` to `Ghost`; on the other hand `Ghost`s do not need paths or produce messages.... maybe... maybe `Tron msg` could be `Property (Maybe msg)`;
** TODO NEXTVER BUG sending value from JS to the choice is not switching it to the corresponding page;
** TODO Store pages inside nesting controls, do not redistribute every time;
** DONE NEXTVER Max cols / Max rows should not be needed (replace by enabling/disabling paging);
** DONE Too many `fold`s in `Property`; Split things into modules;
** DONE Events for `Controls` and Controls' `update`/`view` should be inside the module;
** TODO Abstract `Layout.view` to `Html ((Path, Maybe a) -> Msg)`:
    *** Render Text inputs separately for that to work: texts are the only controls that don't react on click rather on input;
    *** Or, do it as `Layout.view : ((Path, Property a) -> Bounds -> ... -> msg)` and pass controls rendering functions there;
** TODO BUG applying updates as several packages from JS gives no effect (see `ForTiler` example);
** TODO Detachable mode needs more testing;
** TODO BUG `toSwitch` is not sending proper events to JS;
** DONE Move keyboard & mouse drag-start/dragging/drag-end logic to controls themselves;
** TODO Move all possible control-related logic to the controls themselves;
    *** Such logic can be found in code by adding some fake `()`-control and checking the places where we have to cover it / compiler fails;
    *** Also can be found by closing `Property` and `Control` constructors from exposing;
    *** Partly done as `Tron.Tree.Controls`
** TODO Move `Util` stuff to the corresponding modules;
** TODO Move functions related to controls to the controls themselves, hide the `Control` constructor from others;
** TODO Debug `RenderMode` (i.e. ensure `Debug` view still works);
** TODO Use `Size Cells`, like integer size, in `Layout`;
** TODO `Layout.pack` should also put `a` (from a `Property`) into every cell;
** TODO Move `Tron.css` in the code;
** TODO BREAKING? Use some safe Unique IDs to reference the position of the control in the tree, so that while the tree structure is changing, ID's stay the same;
    *** Or, store such IDs together with property;
    *** Consider having `Nil (Property msg)` instead of just `Nil`, so that any property could be hidden, but not absent in the tree;
    *** Check `indexedMap` usages, so that usage of the index is kept to minimum for nested items (mostly done);
** TODO Get rid of functions in the `Model`:
    *** do not store tree in the `Gui msg`, build it every time;
    *** store the actual messages for the current value in the controls, not the handlers (i.e. just `msg` instead of `v -> msg`);
        **** or don't even store the messages, but only values, and only transform them to messages on the `view` stage;
        **** ...like in the model it's `Tron ()`, but
    *** for `.over`, traverse two trees with the same structure (don't forget about ghosts) and move transient states between them;
    *** DONE BREAKING?: `Control`/`Tron`.`andThen` â€” due to handler and `Maybe`, now it is impossible to implement, so I did `Tron.with`;
    *** Remove `evaluate__` functions;
    *** Consider `Control setup msg value = Control (setup -> (Cmd msg, value))`
** DONE `(Path, LabelPath)` pairs are used quite often as well as `Path.advance` & `labelPath ++ [ label ]`, find something egeneric for that cases;
** TODO Do not store cell size in the `Gui msg`, it should be recalculated every time;
** TODO Do not store dock in the `Gui msg`, it should be recalculated every time;
** DONE BREAKING? Change choice and nest to work with `Array`s since we usually need to get item by index? But Array syntax is not very friendly for API
** DONE Rename `Property` -> `Tree` or smth;
** TODO `Zipper` (`These`) as a separate module;

* Deployment

** DONE For Docker, add ability to run any example using environment variable;

* Examples

** TODO BUG NEXTVER The issue with coordinates in _OneKnob_;
** TODO BUG NEXTVER "Look at" is not working in _Detachable_;
** TODO BUG NEXTVER _For Tiler_: pagination is not displayed properly;
** TODO BUG NEXTVER _DatGui_ seems no to work almost at all;
** DONE UI _Constructor_;
    *** TODO BUG The generated code is outdated;
** TODO BUG NEXTVER _A-Frame_ no iterface is visible;
** TODO BUG NEXTVER _Everything_ many values are not sent;
** TODO _ReportToJs_ A lot of senseless information in the JSON Tree;
** TODO Add some indication of the WS server status to the examples;
** TODO Include separate `Random` example to only utilize random generator, and, may be, test the detachable functionality, if the server is started;
** TODO Include links to the examples in the docs;
** TODO Share examples somewhere, i.e. deploy to github;
** TODO A-Frame renderer & Demo to some senseful state;
** TODO Constructor:
    *** Highlight current cell;
    *** Reorder items in the nesting;
    *** Choice: ToKnob / ToSwitch;

* Other

** Blogpost
** Tutorial @ GitBook
